<div class="container w-[1480px] h-[720px] rounded-lg flex shadow-lg opacity-0 scale-50 animate-appear bg-[#1a1a1a] text-[#e1e1e1]">
  <div class="contact-list w-[200px] shadow-md overflow-y-auto bg-[#1a1a1a] border-r border-[#333] opacity-90">
    <div class="contact p-3 hover:bg-[#333] cursor-pointer shadow-md text-[#e1e1e1]">
      Group
    </div>
    <%= for {_, %{id: address}} <- @streams.presences do %>
      <%= if @address !== address do %>
        <div class="contact p-3 hover:bg-[#333] cursor-pointer shadow-md text-[#e1e1e1]">
          <%= EmojiConverter.binary_to_emoji(address) %> <%= last_four_characters(address) %>
        </div>
      <% end %>
    <% end %>
  </div>
  <div class="chat-area flex-grow flex flex-col rounded-br-lg bg-[#1a1a1a] opacity-90">
    <div class="chat-header bg-gradient-to-r from-[#333] to-[#444] p-3 flex justify-between items-center shadow-md rounded-tr-lg border-b border-[#333] relative opacity-90">
      <h1 class="font-bold text-[#e1e1e1]">Level 1</h1>
      <div
        id="timer"
        phx-update="ignore"
        class="timer-container relative w-48 h-4 bg-[#333] rounded"
      >
        <div id="timer-bar" class="absolute top-0 left-0 h-4 bg-[#e1e1e1] rounded"></div>
        <p
          id="timer-text"
          class="absolute top-0 left-0 text-xs w-full text-center text-[#1a1a1a] font-bold leading-4"
        >
        </p>
      </div>
    </div>
    <div
      id="hintContainer"
      class="hint-container flex flex-wrap justify-center items-center gap-2 mb-2 p-2 bg-[#1a1a1a]"
      phx-update="ignore"
    >
      <p>Your riddle pieces üß©</p>
      <%= for riddle_part <- @riddle_parts do %>
        <div
          class="tag-item p-2 bg-[#444] text-[#e1e1e1] rounded-full shadow-md cursor-pointer transition-transform transform hover:scale-105"
          draggable="true"
          id={"riddle_part_#{riddle_part}"}
        >
          <span class="tag-text"><%= riddle_part %></span>
        </div>
      <% end %>
    </div>
    <div
      class="chat-messages flex-grow overflow-y-auto p-3 text-[#e1e1e1]"
      id="chat-messages"
      phx-update="stream"
    >
      <%= for {_, message} <- @streams.messages do %>
        <%= if message.user == @address do %>
          <div class="message user-message bg-[#555] rounded-lg p-2 mb-2 max-w-[70%] self-end ml-auto shadow-sm transition-opacity opacity-0 animate-fadeIn">
            <%= message.body %>
          </div>
        <% else %>
          <%= if message.user == "floor-admin" do %>
            <div class="message bot-message bg-[#666] rounded-lg p-2 mb-2 max-w-[100%] self-start shadow-sm transition-opacity opacity-0 animate-fadeIn">
              üëÅÔ∏è‚Äçüó®Ô∏è FLOORMASTER <br> <%= message.body %>
            </div>
          <% else %>
            <div class="message bot-message bg-[#444] rounded-lg p-2 mb-2 max-w-[70%] self-start shadow-sm transition-opacity opacity-0 animate-fadeIn">
              <%= EmojiConverter.binary_to_emoji(message.user) %> <%= last_four_characters(message.user) %> <br> <%= message.body %>
            </div>
          <% end %>
        <% end %>
      <% end %>
    </div>
    <form class="chat-input flex p-3 shadow-md border-[#333]" phx-submit="send_message">
      <input
        type="text"
        name="message"
        class="flex-grow p-2 border border-[#555] text-[#e1e1e1] rounded-l bg-[#2a2a2a] focus:outline-none focus:ring-2 focus:ring-[#666]"
        placeholder="Type your message..."
        id="message"
        autofocus
      />
      <button
        id="send-button"
        type="submit"
        class="bg-[#666] text-[#e1e1e1] px-4 py-2 rounded-r hover:bg-[#777] shadow-md focus:outline-none focus:ring-2 focus:ring-[#666]"
      >
        Send
      </button>
    </form>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
      const tagContainer = document.getElementById('hintContainer');
      if (tagContainer) {
          Sortable.create(tagContainer, {
              animation: 150,  // Animation speed in ms
              ghostClass: 'sortable-ghost',  // Class name for the drop placeholder
              chosenClass: 'sortable-chosen',  // Class name for the chosen item
              dragClass: 'sortable-drag',  // Class name for the dragging item
          });
      }
      
      // Timer animation
      const timerDuration = <%= @timer %>; // Duration in seconds
      const timerBar = document.getElementById('timer-bar');
      const timerText = document.getElementById('timer-text');
      let timeLeft = timerDuration;
      timerText.innerText = timeLeft + "s";

      const timerInterval = setInterval(() => {
          timeLeft -= 1;
          const percentageLeft = (timeLeft / timerDuration) * 100;
          timerBar.style.width = percentageLeft + "%";
          timerText.innerText = timeLeft + "s";
          
          if (timeLeft <= 0) {
              clearInterval(timerInterval);
              timerText.innerText = "Time is up!";
          }
      }, 1000);
  });
</script>

<style>
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  .animate-fadeIn {
    animation: fadeIn 0.5s ease-in-out forwards;
  }
</style>
